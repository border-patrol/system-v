module FlipFlop
  ( input  wire logic clk
  , input  wire logic resetn // active low reset
  , input  wire logic d
  , output wire logic q
  );

  if resetn
  begin
    assign q = d;
  end
  else
  begin
    drive q;
  end
  /*
        always @ (posedge clk)
                if (! resetn)
                        q <= 0;
                else
                        q <= d;
  */
endmodule

module Top ();

  wire logic clk;
  wire logic resetn;
  wire logic d;
  wire logic q;

  // Create a clock
  //always #10 clk <= ~clk;

  drive (writeTo clk);


  FlipFlop ff ( (readFrom clk)
              , (readFrom resetn)
              , (readFrom d)
              , (writeTo q)
              );

  drive (writeTo resetn);
  drive (writeTo d);
  catch (readFrom q);

  // initial begin
  //	     resetn <= 0;
  //	     d <= 0;
  //
  //	     #10 resetn <= 1;
  //	     #5	     d <= 1;
  //	     #8	     d <= 0;
  //	     #2	     d <= 1;
  //	     #10     d <= 0;
  // end
endmodule
