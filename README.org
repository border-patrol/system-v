#+TITLE: README

We are interested in the /physical/ structure of Hardware Designs, that is how they are wired rather than how they behave.
Ostensibly, SystemV is a subset of SystemVerilog (a well-known Hardware Design & Verification language) that captures salient structural properties of SystemVerilog-style Hardware Design.

Specifically, we are interested in:

1. How to represent modular hardware designs;
2. How to 'correctly' wire hardware components together;
3. How to represent and automatically reason about the emergent properties of data structures both nominally and structurally;

Specifically, we are not interested in:

1. What happens to values
2. General behaviourally aspects of a design.

We are /just/ interested in wiring things together.

We do so by basing the formalism on the Simply-Typed Lambda-Calculus, restricted to follow SystemVerilog constructs more closely, and other interesting type-theoretic structures.

Our contributions are that we have:

1. grounded the design and formalisation of SystemV as a typed lambda calculus;
2. used (or will use) mathematical structures to reason about data structures and their properties;
3. mechanised our formalisation in Idris2, a known dependently-typed general purpose functional programming language;
4. presented our formalisms as /verified compilers/ for creating hardware designs using DSLs that look almost like SystemVerilog;
5. extended and expanded the formalism in novel ways to explore the SystemVerilog design space

We position SystemV as a base formalism that we will look to either:

+ extend :: by introducing new reducible terms;
+ expand :: by introducing new values;
+ excite :: by taking *full* advantage of the STLC as a host formalism

Doing so supports:

1. reasoning about more SystemVerilog design constructs (extending/expanding);
2. investigation of novel extensions (expanding/exciting);
3. designing new and interesting language features (expanding/exciting);

* Languages presented
** SystemV.Core
   =SystemV.Core= is the core formalism upon which all things are based.

   These base constructs are:

+ Modules as functions;
+ Channel creation (projection);
+ Logic and Vectors
+ Vector slicing, indexing, and sizing
+ Driving and catching
+ Runtime decisions using Conditional statements
+ Connecting ports together
+ Casting ports
+ Primitive binary gates (and not)

** SystemV.Annotated

=SystemV.Annotated= is an extension of =SystemV.Base= that adds behavioural annotations.

+ Wire sensitivity
+ Intended usage

** SystemV.HigherOrder

=SystemV.HigherOrder= is an extension of =SystemV.Base= that adds:

+ Higher Order module descriptions.

The interesting thing with this language is that we dropped the constraint on prohibiting higher-order functions.
An interesting question is: How to best represent higher-order modules in the language design?
Should these higher-order designs be parameters or treated as ports?


** SystemV.Params

   =SystemV.Params= is an extension of =SystemV.Base= that adds:

+ Parameterised (with Defaults) Modules supporting Datatype and natural numbers
+ Boolean and Natural number arithmetic
+ Compile time wiring decisions (from parameterised modules)

To support parameterisation of modules and numerical expressions we turn various compile time checks into runtime checks.
Thus supporting:

+ index out of bounds checking
+ datatype mismatch
+ division-by-Zero checking

* Note

This is a constant work in progress.
Many of the ideas are currently scribbled on scraps of paper, or lost in the depths of complicated TeX for type-setting.
We are currently mechanising them for demonstrable, reproducible proofs of correctness.

The code is not polished.

* Nominal and Structural Typing.

We provide a 'meta' type-system to provide intrinsic static typing of terms in SystemV.
Certain terms in SystemVerilog are typed using nominal types: Where they are defined matters.

We want to investigate how to type nominally typed data values in this setting.
This is ongoing work.


#+begin_comment
We use the meta-type system to ensure that nominally typed values can be typed intrinsically against their nominal types.

We treat type 'aliases' and 'newtypes' as term level constructs,
which ensures named types can be differentiated by name i.e. De
Bruijn indices.  Type universes are used to separate descriptions
of how types are formed and their use to type values.

Standard constructions are used to represent the language as an
EDSL, together with proof of progress taken from PLFA Part 2.

We are yet to investigate nominal typing of data types when it comes to equivalence and compatibility.
#+end_comment
