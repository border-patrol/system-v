typedef logic foo;

typedef foo[30] fs;

typedef logic[30] fduip;

module MaybeSwap #( parameter nat how = 2
                  , parameter datatype type = logic)
                  ( input  wire type a
                  , input  wire type b
                  , output wire type x
                  , output wire type y);
  if (eq how 1)
  begin
    assign x = a;
    assign y = b;
  end
  else
  begin
    assign y = a;
    assign x = b;
  end
endmodule


module Top ();
  wire logic a;
  wire logic b;
  wire logic x;
  wire logic y;

  drive (writeTo a);
  drive (writeTo b);
  catch (readFrom x);
  catch (readFrom y);

  MaybeSwap #( how = 1
             , type = logic[30]
             )
             ms ( (readFrom a)
                , (readFrom b)
                , (writeTo x)
                , (writeTo y)
                );
endmodule
